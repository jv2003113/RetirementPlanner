Retirement Planning Web Application Prompt:
Objective: Design and develop a comprehensive web application to assist users in planning for and managing their retirement.

Target Audience: Individuals at various stages of retirement planning, from early-career savers to those already retired.

Key Features and Functionality:

1. User Profile and Goal Setting:

Prompt: Create a user-friendly interface for users to input personal information, including:
Age, current location, desired retirement age.
Marital status, number of dependents.
Current income, expected future income (optional).
Desired retirement lifestyle (e.g., frugal, comfortable, luxurious).
Retirement goals (e.g., travel, hobbies, healthcare).
Prompt: Implement a goal-setting module allowing users to define specific financial targets for retirement (e.g., desired annual retirement income, estimated expenses).
2. Portfolio Management:

Prompt: Develop a system for users to track their investment portfolio:
Input and categorize various investment accounts (e.g., 401(k), IRA, brokerage accounts).
Manually input or integrate with financial institutions (using APIs where feasible) to track asset values.
Visualize portfolio allocation (e.g., pie charts, bar graphs) by asset class (e.g., stocks, bonds, real estate).
Track investment performance and returns over time.
Allow users to model different portfolio allocation scenarios and assess their potential impact on retirement income.
Prompt: Implement a feature to track and analyze investment fees and expenses.
3. Retirement Income Projections:

Prompt: Build a robust retirement income projection tool:
Calculate estimated Social Security benefits based on user input.
Project future portfolio value based on user's current allocation, contributions, and expected returns.
Allow users to model different withdrawal strategies (e.g., fixed percentage, fixed amount, RMDs).
Incorporate inflation adjustments into projections.
Generate clear and intuitive visualizations of projected retirement income and expenses over time.
Prompt: Include Monte Carlo simulation to display a range of possible portfolio outcomes, showing the probability of success.
4. Cash Flow Management:

Prompt: Develop a budgeting and expense tracking module:
Allow users to input and categorize retirement expenses (e.g., housing, healthcare, travel).
Track actual expenses against budgeted amounts.
Project future expenses based on inflation and anticipated lifestyle changes.
Prompt: Create a system to track all sources of retirement income, including pensions, annuities, and part-time work.
5. Tax Planning:

Prompt: Integrate tax planning tools to help users minimize their tax burden in retirement:
Provide information on tax implications of different withdrawal strategies.
Offer guidance on managing required minimum distributions (RMDs).
Allow users to model the impact of different tax scenarios.
6. Healthcare Planning:

Prompt: Include a module to help users estimate and plan for healthcare expenses in retirement:
Provide information on Medicare and other healthcare options.
Allow users to input estimated healthcare costs based on their age and health status.
Model the impact of long-term care expenses.
7. Estate Planning:

Prompt: Offer basic estate planning information and resources:
Provide information on wills, trusts, and other estate planning tools.
Offer links to relevant resources and professionals.
8. Reporting and Analysis:

Prompt: Generate comprehensive reports and visualizations:
Summarize key retirement planning metrics (e.g., retirement readiness score, projected income gap).
Visualize portfolio performance, cash flow, and retirement income projections.
Allow users to export reports in various formats (e.g., PDF, CSV).
9. User Interface and Experience:

Prompt: Design a clean, intuitive, and user-friendly interface.
Prompt: Ensure the application is accessible on various devices (desktop, mobile, tablet).
Prompt: Implement robust security measures to protect user data.
Technical Considerations:

Choose a suitable programming language and framework (e.g., React, Angular, Vue.js for front-end; Python/Django, Node.js/Express for back-end).
Select a database to store user data (e.g., PostgreSQL, MySQL, MongoDB).
Consider using cloud services for hosting and scalability (e.g., AWS, Google Cloud, Azure).
Prompt: Ensure all calculations and projections are based on sound financial principles and industry best practices.
Prompt: Implement a robust API structure, to allow for future integration of other financial tools.
Overall Tone: The application should be informative, empowering, and user-friendly, helping users feel confident and in control of their retirement planning.